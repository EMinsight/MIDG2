
occaKernel void MaxwellsVolumeKernel3D(occaKernelInfoArg, 
				       int occaVariable K,
				       occaPointer float  *g_vgeo,
				       occaPointer float4 *g_DrDsDt,
				       occaPointer float *g_Q,
				       occaPointer float *g_rhsQ){
  
  occaOuterFor0{
    
    /* fastest */
    occaShared float s_Q[p_Nfields*BSIZE];
    occaShared float s_facs[12];
    
    const int k = occaOuterId0;
    
    occaInnerFor0{
      
      const int n = occaInnerId0;
      
      /* "coalesced"  */
      int m = n+k*p_Nfields*BSIZE;
      int id = n;

      s_Q[id] = g_Q[m]; m+=BSIZE; id+=BSIZE;
      s_Q[id] = g_Q[m]; m+=BSIZE; id+=BSIZE;
      s_Q[id] = g_Q[m]; m+=BSIZE; id+=BSIZE;
      s_Q[id] = g_Q[m]; m+=BSIZE; id+=BSIZE;
      s_Q[id] = g_Q[m]; m+=BSIZE; id+=BSIZE;
      s_Q[id] = g_Q[m]; 
      
      m = n;
      id = 12*k+n;
      while(m<12){
	s_facs[m] = g_vgeo[id];
	id += occaInnerDim0;
	m  += occaInnerDim0;
      }
    }
    
    occaBarrier(occaLocalMemFence);
    
    occaInnerFor0{
      
      const int n = occaInnerId0;
      int m, id;
      
      float dHxdr=0,dHxds=0,dHxdt=0;
      float dHydr=0,dHyds=0,dHydt=0;
      float dHzdr=0,dHzds=0,dHzdt=0;
      float dExdr=0,dExds=0,dExdt=0;
      float dEydr=0,dEyds=0,dEydt=0;
      float dEzdr=0,dEzds=0,dEzdt=0;
      float Q;

//#pragma uroll 2
      for(m=0;m<p_Np;){
	float4 D = g_DrDsDt[n+m*BSIZE];
	
	id = m;
	Q = s_Q[id]; dHxdr += D.x*Q; dHxds += D.y*Q; dHxdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHydr += D.x*Q; dHyds += D.y*Q; dHydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHzdr += D.x*Q; dHzds += D.y*Q; dHzdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dExdr += D.x*Q; dExds += D.y*Q; dExdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEydr += D.x*Q; dEyds += D.y*Q; dEydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEzdr += D.x*Q; dEzds += D.y*Q; dEzdt += D.z*Q; 
	++m; 

#if 0
#if !(p_Np%2)

	D = g_DrDsDt[n+m*BSIZE];
	
	id = m;
	Q = s_Q[id]; dHxdr += D.x*Q; dHxds += D.y*Q; dHxdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHydr += D.x*Q; dHyds += D.y*Q; dHydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHzdr += D.x*Q; dHzds += D.y*Q; dHzdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dExdr += D.x*Q; dExds += D.y*Q; dExdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEydr += D.x*Q; dEyds += D.y*Q; dEydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEzdr += D.x*Q; dEzds += D.y*Q; dEzdt += D.z*Q; 
	++m; 

#endif



#if !(p_Np%3)

	D = g_DrDsDt[n+m*BSIZE];
	
	id = m;
	Q = s_Q[id]; dHxdr += D.x*Q; dHxds += D.y*Q; dHxdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHydr += D.x*Q; dHyds += D.y*Q; dHydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHzdr += D.x*Q; dHzds += D.y*Q; dHzdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dExdr += D.x*Q; dExds += D.y*Q; dExdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEydr += D.x*Q; dEyds += D.y*Q; dEydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEzdr += D.x*Q; dEzds += D.y*Q; dEzdt += D.z*Q; 
	++m; 

#endif

#if !(p_Np%4)

	D = g_DrDsDt[n+m*BSIZE];
	
	id = m;
	Q = s_Q[id]; dHxdr += D.x*Q; dHxds += D.y*Q; dHxdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHydr += D.x*Q; dHyds += D.y*Q; dHydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dHzdr += D.x*Q; dHzds += D.y*Q; dHzdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dExdr += D.x*Q; dExds += D.y*Q; dExdt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEydr += D.x*Q; dEyds += D.y*Q; dEydt += D.z*Q; id += BSIZE;
	Q = s_Q[id]; dEzdr += D.x*Q; dEzds += D.y*Q; dEzdt += D.z*Q; 
	++m; 

#endif

#endif	
      }
      
      const float drdx= s_facs[0];
      const float drdy= s_facs[1];
      const float drdz= s_facs[2];
      const float dsdx= s_facs[4];
      const float dsdy= s_facs[5];
      const float dsdz= s_facs[6];
      const float dtdx= s_facs[8];
      const float dtdy= s_facs[9];
      const float dtdz= s_facs[10];
      
      m = n+p_Nfields*BSIZE*k;
      
      g_rhsQ[m] = -(drdy*dEzdr+dsdy*dEzds+dtdy*dEzdt - drdz*dEydr-dsdz*dEyds-dtdz*dEydt); m += BSIZE;
      g_rhsQ[m] = -(drdz*dExdr+dsdz*dExds+dtdz*dExdt - drdx*dEzdr-dsdx*dEzds-dtdx*dEzdt); m += BSIZE;
      g_rhsQ[m] = -(drdx*dEydr+dsdx*dEyds+dtdx*dEydt - drdy*dExdr-dsdy*dExds-dtdy*dExdt); m += BSIZE;
      g_rhsQ[m] =  (drdy*dHzdr+dsdy*dHzds+dtdy*dHzdt - drdz*dHydr-dsdz*dHyds-dtdz*dHydt); m += BSIZE;
      g_rhsQ[m] =  (drdz*dHxdr+dsdz*dHxds+dtdz*dHxdt - drdx*dHzdr-dsdx*dHzds-dtdx*dHzdt); m += BSIZE;
      g_rhsQ[m] =  (drdx*dHydr+dsdx*dHyds+dtdx*dHydt - drdy*dHxdr-dsdy*dHxds-dtdy*dHxdt); 
    }
  }
}
